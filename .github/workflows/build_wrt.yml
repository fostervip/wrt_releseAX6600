name: Build WRT
run-name: Build - ${{ inputs.model }}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: jdcloud_ipq60xx_immwrt
        options:
          - jdcloud_ipq60xx_libwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_lede
          - cmcc_rax3000m_immwrt
          - redmi_ax6000_immwrt21
          - jdcloud_ax6000_immwrt
          - redmi_ax5_immwrt
          - zn_m2_libwrt
          - x64_immwrt
          - jdcloud_ipq60xx_k612
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04
          - ubuntu-latest


jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space
        uses: FirelightFlagboy/gh-runner-free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      
      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ inputs.model }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
            ./action_build/dl
          key: ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi
          if [ -d "./action_build/dl" ]; then
              find "./action_build/dl" -type f -exec touch {} +
          fi

      - name: Build Firmware
        run: ./build.sh ${{ inputs.model }}

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 删除 action_build/dl 目录下的旧缓存
          find ./action_build/dl -maxdepth 1 -mindepth 1 -type d -exec rm -rf {} +
          find ./action_build/dl -maxdepth 1 -type f -size +10M -exec rm -f {} +
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"
          echo "dl: $(du -sh ./action_build/dl | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.model }}
          path: ./firmware/*.*
